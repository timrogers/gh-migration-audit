name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags: ['v**']

permissions:
  contents: read

env:
  NODE_VERSION: 22.x

jobs:
  test_and_lint:
    name: Test and lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4.0.4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci
      - run: npm run lint
      - run: npm run test

  package:
    name: Package binaries (${{ matrix.os }})
    strategy:
      matrix:
        os: [ windows, macos, ubuntu ]
    runs-on: ${{ matrix.os }}-latest
    env:
      PLATFORM_OS_NAME: ${{ matrix.os == 'ubuntu' && 'linux' || matrix.os }}
      PLATFORM_NODE_EXECUTABLE_NAME: migration-audit-${{ matrix.os == 'macos' && 'darwin' || (matrix.os == 'windows' && 'win' || 'linux' )}}
      PLATFORM_GH_EXECUTABLE_NAME: gh-migration-audit-${{ matrix.os == 'macos' && 'darwin' || (matrix.os == 'windows' && 'windows' || 'linux' )}}
      PLATFORM_EXTENSION: ${{ matrix.os == 'macos' && '' || (matrix.os == 'windows' && '.exe' || '' )}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4.0.4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate binaries
        run: npm run packageSea ${{env.PLATFORM_OS_NAME}}

      - name: Rename x64 binary to conform to GitHub CLI extension rules
        run: mv bin/${{ env.PLATFORM_NODE_EXECUTABLE_NAME }}-x64${{ env.PLATFORM_EXTENSION }} bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64${{ env.PLATFORM_EXTENSION }}

      - name: Rename ARM64 binary to conform to GitHub CLI extension rules
        run: mv bin/${{ env.PLATFORM_NODE_EXECUTABLE_NAME }}-arm64${{ env.PLATFORM_EXTENSION }} bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64${{ env.PLATFORM_EXTENSION }}

      - name: Write Apple signing key to a file
        env:
          APPLE_SIGNING_KEY_P12: ${{ secrets.APPLE_SIGNING_KEY_P12 }}
        run: echo "$APPLE_SIGNING_KEY_P12" | base64 -d -o key.p12
        if: ${{ matrix.os == 'macos' }}

      - name: Write App Store Connect API key to a file
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: echo "$APP_STORE_CONNECT_API_KEY" > app_store_connect_api_key.json
        if: ${{ matrix.os == 'macos' }}

      - name: Sign macOS x64 binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64${{ env.PLATFORM_EXTENSION }}
          p12_file: key.p12
          p12_password: ${{ secrets.APPLE_SIGNING_KEY_PASSWORD }}
          sign: true
          sign_args: '--code-signature-flags=runtime'
        if: ${{ matrix.os == 'macos' }}

      - name: Sign macOS ARM64 binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64${{ env.PLATFORM_EXTENSION }}
          p12_file: key.p12
          p12_password: ${{ secrets.APPLE_SIGNING_KEY_PASSWORD }}
          sign: true
          sign_args: '--code-signature-flags=runtime'
        if: ${{ matrix.os == 'macos' }}

      - name: Upload ARM64 binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{env.PLATFORM_OS_NAME}}-arm64
          path: bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64${{env.PLATFORM_EXTENSION}}
      
      - name: Upload x64 binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ env.PLATFORM_OS_NAME }}-amd64
          path: bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64${{ env.PLATFORM_EXTENSION }}

      - name: Archive macOS AMD64 binary for notarisation (macOS only)
        run: zip ${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64.zip bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64${{ env.PLATFORM_EXTENSION }}
        if: ${{ matrix.os == 'macos' }}

      - name: Notarize signed macOS AMD64 binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: ${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-amd64.zip
          sign: false
          notarize: true
          app_store_connect_api_key_json_file: app_store_connect_api_key.json
        if: ${{ matrix.os == 'macos' }}

      - name: Archive macOS ARM64 binary for notarisation (macOS only)
        run: zip ${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64.zip bin/${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64${{ env.PLATFORM_EXTENSION }}
        if: ${{ matrix.os == 'macos' }}
        
      - name: Notarize signed macOS ARM64 binary (macOS only)
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: ${{ env.PLATFORM_GH_EXECUTABLE_NAME }}-arm64.zip
          sign: false
          notarize: true
          app_store_connect_api_key_json_file: app_store_connect_api_key.json
        if: ${{ matrix.os == 'macos' }}
      

  end_to_end_tests_macos:
    name: Run end to end tests (macOS/GitHub.com)
    runs-on: macos-latest
    needs: ['package']

    steps:
      - name: Download macOS binary
        uses: dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: package-macos-amd64
          path: bin
      - name: Create `output` directory
        run: mkdir output
      - name: Make macOS binary executable
        run: chmod +x bin/gh-migration-audit-darwin-amd64
      - name: Audit a single repo
        run: ./bin/gh-migration-audit-darwin-amd64 audit-repo --owner gh-migration-audit-sandbox --repo second-repo-with-actions-variables --output-path output/audit-repo.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Audit repos owned by an organization
        run: ./bin/gh-migration-audit-darwin-amd64 audit-all --owner gh-migration-audit-sandbox --output-path output/audit-all.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Create input CSV for audit-repos
        run: |
          echo "owner,name
          gh-migration-audit-sandbox,second-repo-with-actions-variables" > input.csv
      - name: Print input CSV
        run: cat input.csv
      - name: Audit specific repos from input CSV
        run: ./bin/gh-migration-audit-darwin-amd64 audit-repos --input-path input.csv --output-path output/audit-repos.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Upload output as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-outputs
          path: output
  
  end_to_end_tests_linux:
    name: Run end to end tests (Linux/GitHub.com)
    runs-on: ubuntu-latest
    needs: ['package']

    steps:
      - name: Download Linux binary
        uses: dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11
        with:
           run_id: ${{ github.event.workflow_run.id }}
           name: package-linux-amd64
           path: bin
      - name: Create `output` directory
        run: mkdir output
      - name: Make Linux binary executable
        run: chmod +x bin/gh-migration-audit-linux-amd64
      - name: Audit a single repo
        run: ./bin/gh-migration-audit-linux-amd64 audit-repo --owner gh-migration-audit-sandbox --repo second-repo-with-actions-variables --output-path output/audit-repo.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Audit repos owned by an organization
        run: ./bin/gh-migration-audit-linux-amd64 audit-all --owner gh-migration-audit-sandbox --output-path output/audit-all.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Create input CSV for audit-repos
        run: |
          echo "owner,name
          gh-migration-audit-sandbox,second-repo-with-actions-variables" > input.csv
      - name: Print input CSV
        run: cat input.csv
      - name: Audit specific repos from input CSV
        run: ./bin/gh-migration-audit-linux-amd64 audit-repos --input-path input.csv --output-path output/audit-repos.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Upload outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-outputs
          path: output

  end_to_end_tests_windows:
    name: Run end to end tests (Windows/GitHub.com)
    runs-on: windows-latest
    needs: ['package']

    steps:
      - name: Download Windows binary
        uses: dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: package-windows-amd64
          path: bin
      - name: Create `output` directory
        run: mkdir output
      - name: Audit a single repo
        run: bin/gh-migration-audit-windows-amd64.exe audit-repo --owner gh-migration-audit-sandbox --repo second-repo-with-actions-variables --output-path output/audit-repo.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Audit repos owned by an organization
        run: bin/gh-migration-audit-windows-amd64.exe audit-all --owner gh-migration-audit-sandbox --output-path output/audit-all.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Create input CSV for audit-repos
        run: |
          echo "owner,name
          gh-migration-audit-sandbox,second-repo-with-actions-variables" > input.csv
      - name: Print input CSV
        run: cat input.csv
      - name: Audit specific repos from input CSV
        run: bin/gh-migration-audit-windows-amd64.exe audit-repos --input-path input.csv --output-path output/audit-repos.csv --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MIGRATION_AUDIT_SANDBOX_TOKEN }}
      - name: Upload outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-outputs
          path: output

  end_to_end_tests_linux_ghes:
    name: Run end to end tests (Linux/GitHub Enterprise Server)
    runs-on: ubuntu-latest
    needs: ['package']

    steps:
      - name: Download Linux binary
        uses: dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11
        with:
           run_id: ${{ github.event.workflow_run.id }}
           name: package-linux-amd64
           path: bin
      - name: Create `output` directory
        run: mkdir output
      - name: Make Linux binary executable
        run: chmod +x bin/gh-migration-audit-linux-amd64
      - name: Audit a single repo
        run: ./bin/gh-migration-audit-linux-amd64 audit-repo --owner gh-migration-audit-sandbox --repo second-repo-with-actions-variables --output-path output/audit-repo.csv --base-url ${{ secrets.GHES_BASE_URL }} --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GHES_TOKEN }}
      - name: Audit repos owned by an organization
        run: ./bin/gh-migration-audit-linux-amd64 audit-all --owner gh-migration-audit-sandbox --output-path output/audit-all.csv --base-url ${{ secrets.GHES_BASE_URL }} --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GHES_TOKEN }}
      - name: Create input CSV for audit-repos
        run: |
          echo "owner,name
          gh-migration-audit-sandbox,second-repo-with-actions-variables" > input.csv
      - name: Print input CSV
        run: cat input.csv
      - name: Audit specific repos from input CSV
        run: ./bin/gh-migration-audit-linux-amd64 audit-repos --input-path input.csv --output-path output/audit-repos.csv --base-url ${{ secrets.GHES_BASE_URL }} --disable-telemetry
        env:
          GITHUB_TOKEN: ${{ secrets.GHES_TOKEN }}
      - name: Upload outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-github-enterprise-server-outputs
          path: output

  create_release:
    name: Create release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: ['package','test_and_lint']

    permissions:
      contents: write

    steps:
      - name: Download Windows x64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-windows-amd64
          path: bin
      - name: Download Windows ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-windows-arm64
          path: bin
      - name: Download macOS x64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-macos-amd64
          path: bin
      - name: Download macOS ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-macos-arm64
          path: bin          
      - name: Download Linux x64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-linux-amd64
          path: bin
      - name: Download Linux arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: package-linux-arm64
          path: bin
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/gh-migration-audit-darwin-amd64
            bin/gh-migration-audit-darwin-arm64
            bin/gh-migration-audit-linux-amd64
            bin/gh-migration-audit-linux-arm64
            bin/gh-migration-audit-windows-amd64.exe
            bin/gh-migration-audit-windows-arm64.exe
          generate_release_notes: true
